From 59d575d1f7fb404cb3687a82cbe18a0ee1085470 Mon Sep 17 00:00:00 2001
From: Arman <48544263+puchik@users.noreply.github.com>
Date: Mon, 22 Jun 2020 18:16:58 -0700
Subject: [PATCH] GIProbes: blend up to 4, lowering energy blends into
 environment energy

- Up to 4 GIProbes can now affect/blend on a single object, up from 2
- If GIProbe does not fully cover an object or has energy  < 1, environment energy
will now be properly compensated (only tested for dynamic range = 4) (Not applicable for "Interior" GIProbes")
---
 drivers/gles3/rasterizer_scene_gles3.cpp | 40 +++++++++++++++++++-
 drivers/gles3/shaders/scene.glsl         | 47 ++++++++++++++++++++++++
 2 files changed, 86 insertions(+), 1 deletion(-)

diff --git a/drivers/gles3/rasterizer_scene_gles3.cpp b/drivers/gles3/rasterizer_scene_gles3.cpp
index 27173d317b..6c26a932fa 100644
--- a/drivers/gles3/rasterizer_scene_gles3.cpp
+++ b/drivers/gles3/rasterizer_scene_gles3.cpp
@@ -1915,7 +1915,7 @@ void RasterizerSceneGLES3::_setup_light(RenderList::Element *e, const Transform
 		state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_NORMAL_BIAS1, gipi->probe ? gipi->probe->normal_bias * bias_scale : 0.0);
 		state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_BLEND_AMBIENT1, gipi->probe ? !gipi->probe->interior : false);
 		state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_CELL_SIZE1, gipi->cell_size_cache);
-		if (gi_probe_count > 1) {
+		if (gi_probe_count >= 2) {
 
 			GIProbeInstance *gipi2 = gi_probe_instance_owner.getptr(ridp[1]);
 
@@ -1933,6 +1933,44 @@ void RasterizerSceneGLES3::_setup_light(RenderList::Element *e, const Transform
 
 			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE2_ENABLED, false);
 		}
+
+		if (gi_probe_count >= 3) {
+
+			GIProbeInstance *gipi3 = gi_probe_instance_owner.getptr(ridp[2]);
+			
+			glActiveTexture(GL_TEXTURE0 + storage->config.max_texture_image_units - 11);
+			glBindTexture(GL_TEXTURE_3D, gipi3->tex_cache);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_XFORM3, gipi3->transform_to_data * p_view_transform);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_BOUNDS3, gipi3->bounds);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_CELL_SIZE3, gipi3->cell_size_cache);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_MULTIPLIER3, gipi3->probe ? gipi3->probe->dynamic_range * gipi3->probe->energy : 0.0);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_BIAS3, gipi3->probe ? gipi3->probe->bias * bias_scale : 0.0);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_NORMAL_BIAS3, gipi3->probe ? gipi3->probe->normal_bias * bias_scale : 0.0);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_BLEND_AMBIENT3, gipi3->probe ? !gipi3->probe->interior : false);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE3_ENABLED, true);
+		} else {
+
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE3_ENABLED, false);
+		}
+
+		if (gi_probe_count >= 4) {
+
+			GIProbeInstance *gipi4 = gi_probe_instance_owner.getptr(ridp[3]);
+
+			glActiveTexture(GL_TEXTURE0 + storage->config.max_texture_image_units - 12);
+			glBindTexture(GL_TEXTURE_3D, gipi4->tex_cache);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_XFORM4, gipi4->transform_to_data * p_view_transform);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_BOUNDS4, gipi4->bounds);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_CELL_SIZE4, gipi4->cell_size_cache);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_MULTIPLIER4, gipi4->probe ? gipi4->probe->dynamic_range * gipi4->probe->energy : 0.0);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_BIAS4, gipi4->probe ? gipi4->probe->bias * bias_scale : 0.0);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_NORMAL_BIAS4, gipi4->probe ? gipi4->probe->normal_bias * bias_scale : 0.0);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE_BLEND_AMBIENT4, gipi4->probe ? !gipi4->probe->interior : false);
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE4_ENABLED, true);
+		} else {
+
+			state.scene_shader.set_uniform(SceneShaderGLES3::GI_PROBE4_ENABLED, false);
+		}
 	} else if (!e->instance->lightmap_capture_data.empty()) {
 
 		glUniform4fv(state.scene_shader.get_uniform_location(SceneShaderGLES3::LIGHTMAP_CAPTURES), 12, (const GLfloat *)e->instance->lightmap_capture_data.ptr());
diff --git a/drivers/gles3/shaders/scene.glsl b/drivers/gles3/shaders/scene.glsl
index a45ac2eb8a..a86333d338 100644
--- a/drivers/gles3/shaders/scene.glsl
+++ b/drivers/gles3/shaders/scene.glsl
@@ -1466,6 +1466,28 @@ uniform highp float gi_probe_normal_bias2;
 uniform bool gi_probe2_enabled;
 uniform bool gi_probe_blend_ambient2;
 
+uniform mediump sampler3D gi_probe3; //texunit:-11
+uniform highp mat4 gi_probe_xform3;
+uniform highp vec3 gi_probe_bounds3;
+uniform highp vec3 gi_probe_cell_size3;
+uniform highp float gi_probe_multiplier3;
+uniform highp float gi_probe_bias3;
+uniform highp float gi_probe_normal_bias3;
+uniform bool gi_probe3_enabled;
+uniform bool gi_probe_blend_ambient3;
+
+uniform mediump sampler3D gi_probe4; //texunit:-12
+uniform highp mat4 gi_probe_xform4;
+uniform highp vec3 gi_probe_bounds4;
+uniform highp vec3 gi_probe_cell_size4;
+uniform highp float gi_probe_multiplier4;
+uniform highp float gi_probe_bias4;
+uniform highp float gi_probe_normal_bias4;
+uniform bool gi_probe4_enabled;
+uniform bool gi_probe_blend_ambient4;
+
+bool affected_by_gi = false; // If none of the touching GIProbes are actually in range, we should add ambient (if applicable)
+
 vec3 voxel_cone_trace(mediump sampler3D probe, vec3 cell_size, vec3 pos, vec3 ambient, bool blend_ambient, vec3 direction, float tan_half_angle, float max_distance, float p_bias) {
 
 	float dist = p_bias; //1.0; //dot(direction,mix(vec3(-1.0),vec3(1.0),greaterThan(direction,vec3(0.0))))*2.0;
@@ -1506,6 +1528,7 @@ void gi_probe_compute(mediump sampler3D probe, mat4 probe_xform, vec3 bounds, ve
 	if (any(bvec2(any(lessThan(probe_pos, vec3(0.0))), any(greaterThan(probe_pos, bounds))))) {
 		return;
 	}
+	affected_by_gi = true;
 
 	vec3 blendv = abs(probe_pos / bounds * 2.0 - 1.0);
 	float blend = clamp(1.0 - max(blendv.x, max(blendv.y, blendv.z)), 0.0, 1.0);
@@ -1563,6 +1586,14 @@ void gi_probe_compute(mediump sampler3D probe, mat4 probe_xform, vec3 bounds, ve
 	//irr_light=vec3(0.0);
 
 	out_spec += vec4(irr_light * blend, blend);
+
+	// Get a ratio of how much we need to compensate with non-gi energy
+	// Divide by 4 because our dynamic range "should" be 4 and multiplier = energy * dynamic range
+	float energy_deficit = (1.0 - multiplier / 4.0);
+	if (blend_ambient && energy_deficit <= 1.0) {
+		out_spec.rgb += environment * energy_deficit * blend;
+		out_diff.rgb += ambient * energy_deficit  * blend;
+	}
 }
 
 void gi_probes_compute(vec3 pos, vec3 normal, float roughness, inout vec3 out_specular, inout vec3 out_ambient) {
@@ -1594,6 +1625,22 @@ void gi_probes_compute(vec3 pos, vec3 normal, float roughness, inout vec3 out_sp
 		gi_probe_compute(gi_probe2, gi_probe_xform2, gi_probe_bounds2, gi_probe_cell_size2, pos, ambient, environment, gi_probe_blend_ambient2, gi_probe_multiplier2, normal_mat, ref_vec, roughness, gi_probe_bias2, gi_probe_normal_bias2, spec_accum, diff_accum);
 	}
 
+	if (gi_probe3_enabled) {
+
+		gi_probe_compute(gi_probe3, gi_probe_xform3, gi_probe_bounds3, gi_probe_cell_size3, pos, ambient, environment, gi_probe_blend_ambient3, gi_probe_multiplier3, normal_mat, ref_vec, roughness, gi_probe_bias3, gi_probe_normal_bias3, spec_accum, diff_accum);
+	}
+
+	if (gi_probe4_enabled) {
+
+		gi_probe_compute(gi_probe4, gi_probe_xform4, gi_probe_bounds4, gi_probe_cell_size4, pos, ambient, environment, gi_probe_blend_ambient4, gi_probe_multiplier4, normal_mat, ref_vec, roughness, gi_probe_bias4, gi_probe_normal_bias4, spec_accum, diff_accum);
+	}
+
+	// If the area isn't affected by GI at all, just add all the energy (it won't be picked up by low energies above)
+	if (!affected_by_gi && (gi_probe_blend_ambient1 || gi_probe_blend_ambient2 || gi_probe_blend_ambient3 || gi_probe_blend_ambient4)) {
+		spec_accum.rgb += environment;
+		diff_accum.rgb += ambient;
+	}
+
 	if (diff_accum.a > 0.0) {
 		diff_accum.rgb /= diff_accum.a;
 	}
-- 
2.26.2.windows.1

